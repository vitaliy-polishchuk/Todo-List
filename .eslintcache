[{"/Users/dev/WebstormProjects/test/src/index.js":"1","/Users/dev/WebstormProjects/test/src/reportWebVitals.js":"2","/Users/dev/WebstormProjects/test/src/App.js":"3","/Users/dev/WebstormProjects/test/src/components/container/container.jsx":"4","/Users/dev/WebstormProjects/test/src/components/header/header.jsx":"5","/Users/dev/WebstormProjects/test/src/components/headerlist/headerlist.jsx":"6","/Users/dev/WebstormProjects/test/src/components/ListTodo/list.jsx":"7"},{"size":506,"mtime":1612338597296,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1612338597296,"results":"10","hashOfConfig":"9"},{"size":236,"mtime":1612340874590,"results":"11","hashOfConfig":"9"},{"size":643,"mtime":1612338597295,"results":"12","hashOfConfig":"9"},{"size":238,"mtime":1612338597295,"results":"13","hashOfConfig":"9"},{"size":596,"mtime":1612357274632,"results":"14","hashOfConfig":"9"},{"size":2196,"mtime":1612439583974,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"v5o4y",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/dev/WebstormProjects/test/src/index.js",[],["32","33"],"/Users/dev/WebstormProjects/test/src/reportWebVitals.js",[],"/Users/dev/WebstormProjects/test/src/App.js",[],"/Users/dev/WebstormProjects/test/src/components/container/container.jsx",[],"/Users/dev/WebstormProjects/test/src/components/header/header.jsx",[],"/Users/dev/WebstormProjects/test/src/components/headerlist/headerlist.jsx",[],"/Users/dev/WebstormProjects/test/src/components/ListTodo/list.jsx",["34"],"import React, {useEffect, useState} from \"react\";\nimport style from './list.module.css'\n\n\nfunction List() {\n    const [items, setItems] = useState([]);\n\n    //componentDidMount\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/todos/')\n            .then(response => response.json())\n            .then(data => {\n                setItems(data)\n\n            })\n    }, []);\n\n    //componentDidUpdate\n\n\n    useEffect(() => {\n\n    }, [items]);\n\n    //componentDidUnmount\n    useEffect(() => {\n\n        return () => {\n\n        }\n    }, []);\n\n\n    const handleClick = (e, task, index) => {\n        e.preventDefault();\n\n        const newItems = items.map((item) => {\n            if (task.title === item.title) {\n                item.completed = !item.completed\n            }\n            return item\n        })\n        setItems(newItems)\n\n    }\n\n    function handleRemove(id) {\n        const newList = items.filter((item) => item.id !== id);\n        setItems(newList);\n        fetch('https://jsonplaceholder.typicode.com/todos/' + id, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log('saved', data)\n            })\n    }\n\n    return (\n        <div className={style.list_block}>\n            <ol>\n                {\n                    items.map((task, index) => {\n\n                        let rootClass = task.completed ? style.li_list : style.li_list2\n                        return (\n                            <li className={rootClass} key={index}>\n                                {task.title} <a className={style.aa} href=\"#\"><span\n                                onClick={(e) => handleClick(e, task, index)}\n                                className={style.span2}>&#10004;</span><span\n                                onClick={() => handleRemove(task.id)}\n                                className={style.span}>&#10008;</span></a>\n                            </li>\n                        )\n                    })\n                }\n            </ol>\n        </div>\n    )\n}\n\n\nexport default List",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":71,"column":46,"nodeType":"41","endLine":71,"endColumn":79},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]